@* Menu - The customer menu and order viewer. *@
@using PickUpOrder.Models
@{
    ViewBag.Title = "Menu";
    var db = new PickUpOrderDBEntities2();

    // This is temporary until the user DB is implemented.
    var mostRecentOrder = db.Orders.Find(1);
}

@* Print the header. *@
<h2>Welcome to the menu.</h2>

@* Display every item in the menu. *@
<table>
    @* Print the table header. *@
    <thread>
        <tr>
            <td>Name</td>
            <td>Price</td>
        </tr>
    </thread>
    @foreach (MenuItem item in db.MenuItems)
    {
        @* Print the item information. *@
        <tr>
            <td>@item.Name</td>
            <td>$@(((int) item.Price / 100.0).ToString("0.00"))</td>
            <td>
                @Html.ActionLink("Add to Order", "AddToOrder", "Menu",
                                 new { IDtoAdd = item.ItemID }, null)
            </td>
        </tr>
        <tr>
            <td>@item.Description</td>
        </tr>
    }
</table>

@* If there is an order associated with the user, display it. *@
@* FIXME: right now, it only ever checks row 1. *@
@* FIXME: Also, add code to remove deleted items and notify the user. *@
@if (mostRecentOrder != null && mostRecentOrder.ContentsToItemList() != null)
{
    <h2>Order details</h2>
    <h2>Contents: @mostRecentOrder.OrderContents</h2>
    <table>
        @foreach(MenuItem item in mostRecentOrder.ContentsToItemList())
        {
            <tr>
                <td>@item.Name</td>
                <td>$@(((int) item.Price / 100.0).ToString("0.00"))</td>
                <td>
                    @Html.ActionLink("Remove", "RemoveFromOrder", "Menu",
                                     new { IDtoRemove = item.ItemID }, null)
                </td>
            </tr>
        }
    </table>
    <h2>Total cost: $@mostRecentOrder.CalcFinalCost()</h2>
}

@* Once users are implemented, provide the status of submitted orders here. *@

@* Define the cell size. *@
<style type="text/css">
    td {
        width: 200px;
    }
</style>