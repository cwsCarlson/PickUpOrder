@* Menu - The customer menu and order viewer. *@

@using PickUpOrder.Models
@model IQueryable<MenuItem>
@{
    ViewBag.Title = "Menu";
    var db = new PickUpOrderDBEntities2();
    var removals = new Dictionary<MenuItem, int>();

    // Sort by category, then convert to a list to ease iteration.
    var menuContent = Model.OrderBy(e => e.Category).ToList();

    // This is temporary until the user DB is implemented.
    var mostRecentOrder = db.Orders.Find(1);
}

@* Print the header. *@
<h2>Welcome to the menu.</h2>
@Html.ActionLink("Refresh/Exit Search", "Menu", "Menu")

@* Search function. *@
@using (Html.BeginForm("Search", "Menu", FormMethod.Post))
{
    @* This is the query box. *@
    @Html.TextBox("query")
    <input type="submit" value="Search" />
}

@* Display every item in the menu in their respective category. *@
@for (int i = 0; i < menuContent.Count; i++)
{
    @* A category is only null if an item is deleted, so skip if it's null. *@
    if (menuContent[i].Category == null)
    { continue; }
    @* Print the category name. *@
    <h3>@db.Categories.Find(menuContent[i].Category).CategoryName</h3>
    <table>
        @* Print the table header. *@
        <thread>
            <tr>
                <td>Name</td>
                <td>Price</td>
            </tr>
        </thread>
        @for (; i < menuContent.Count; i++)
        {
            @* No need to check whether an item is valid.
                Invalid items were pushed to the start of the list
                since they had null categories. *@
            <tr>
                <td>@menuContent[i].Name</td>
                <td>
                    $@(((int)menuContent[i].Price / 100.0).ToString("0.00"))
                </td>
                <td>
                    @Html.ActionLink("Add to Order", "AddToOrder", "Menu",
                                     new { IDtoAdd = menuContent[i].ItemID },
                                     null)
                </td>
            </tr>
            <tr>
                <td>@menuContent[i].Description</td>
            </tr>

            @* If this is the end of a category, exit this loop
                to print the next category header. *@
            if (i != menuContent.Count - 1 &&
                menuContent[i].Category != menuContent[i + 1].Category)
            { break; }
        }
    </table>
}

@* If there is an order associated with the user, display it. *@
@* FIXME: right now, it only ever checks row 1. *@
@if (mostRecentOrder != null && mostRecentOrder.ContentsToItemList() != null)
{
    <h2>Order details</h2>
    @* Print the contents string. *@
    @* FIXME: Remove once testing begins. *@
    <h2>Contents: @mostRecentOrder.OrderContents</h2>
    <table>
        @foreach (MenuItem item in mostRecentOrder.ContentsToItemList())
        {
            @* If the item should be removed, then add it to the chopping block. *@
            if (item.Price == null && removals.ContainsKey(item))
            { removals[item]++; }
            else if (item.Price == null)
            { removals.Add(item, 1); }

            @* Otherwise, print its information. *@
            else
            {
                <tr>
                    <td>@item.Name</td>
                    <td>$@(((int)item.Price / 100.0).ToString("0.00"))</td>
                    <td>
                        @Html.ActionLink("Remove", "RemoveFromOrder", "Menu",
                                          new { IDtoRemove = item.ItemID }, null)
                    </td>
                </tr>
            }
        }
    </table>

    @* If something is removable, remove it and let the user know. *@
    if (removals.Count >= 1)
    {
        foreach (MenuItem toRemove in removals.Keys)
        { mostRecentOrder.RemoveMultipleItems(toRemove, removals[toRemove]); }
        db.SaveChanges();

        @* Print the appropriate message depending on the number of removals. *@
        if (removals.Count == 1)
        { <p>An item was removed from your order because it was deleted from the menu.</p> }
        else
        { <p>@removals.Count items were removed from your order because they were deleted from the menu.</p> }
}
<h2>Total cost: $@mostRecentOrder.CalcFinalCost()</h2>
}

@* Once users are implemented, provide the status of submitted orders here. *@

@* Define the cell size. *@
<style type="text/css">
    td {
        width: 200px;
    }
</style>